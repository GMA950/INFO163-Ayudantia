- Pascal-FC for IBM PC compatibles - 
- Compiler Version jc-0.9.40

G L Davies  &  A Burns, University of Bradford
J C Coppens, Universidad Católica de Córdoba

Compiler listing

    1     0 program barbero;
    2     0 
    3     0 var
    4     0     barberReady, availableWaitingRoomSeats, customersWaiting : semaphore;
    5     0     {barbero listo, asientos disponibles en sala de espere, clientes esperando}
    6     0     WRseats: integer;
    7     0     {asientos en sala de espera}
    8     0 
    9     0 process type barber;
   10     0 begin
   11     0     while true do
   12     2     begin
   13     2         sleep(10);
   14     4         {Barbero esperara clientes para trabajar}
   15     4         wait(customersWaiting);
   16     6         wait(availableWaitingRoomSeats);
   17     8         WRseats:= WRseats +1;
   18    13         signal(barberReady);
   19    15         signal(availableWaitingRoomSeats);
   20    17         writeln('Barbero va a atender');
   21    20         sleep(10);
   22    22 
   23    22     end;
   24    23     
   25    23 end;
   26    24     
   27    24 process type customer;
   28    24 var atendido,no_atendido : integer;
   29    24 begin
   30    24     atendido:=0;
   31    27     while atendido<>1 do
   32    31     begin
   33    31         sleep(10);
   34    33         wait(availableWaitingRoomSeats);
   35    35         if WRseats > 0 then
   36    39         {Si ha asientos de espera disponible, el cliente se sentara a esperar que lo atiendan}
   37    39             begin
   38    39                 writeln('Llega cliente y se sienta');
   39    42                 WRseats:= WRseats - 1;
   40    47                 signal(customersWaiting);
   41    49                 signal(availableWaitingRoomSeats);
   42    51                 writeln('Cliente espera atencion');
   43    54                 wait(barberReady);
   44    56                 writeln('Cliente esta siendo atendido');
   45    59                 sleep(10);
   46    61                 writeln('Cliente termino de ser atendido y se va');
   47    64                 atendido:=Random(2);
   48    68                 sleep(10);
   49    70             end
   50    70         else begin
   51    71         {Si no hay asientos el cliente se ira y volvera en otro momento}
   52    71                 signal(availableWaitingRoomSeats);
   53    73                 writeln('Cliente no encontro asiento y se va');
   54    76                 sleep(10);
   55    78             end;
   56    78     end;
   57    79 end;
   58    80 
   59    80 var
   60    80     customers : array [1..7] of customer;
   61    80     barbershopOwner : barber;
   62    80     i,n : integer;        
   63    80 
   64    80 begin
   65    80     Randomize;
   66    81     WRseats:=5;
   67    84     initial(barberReady,0);
   68    88     initial(availableWaitingRoomSeats,1);
   69    92     initial(customersWaiting,0);
   70    96 
   71    96     cobegin;
   72    97         barbershopOwner;
   73   101         for i := 1 to 7 do
   74   105             customers[i];
   75   112     coend;
   76   113 
   77   113 end.


Symbol table

     link   object      type          ref  normal  lvl  adr  aux  name

 56    55   procedure   notyp           2    TRUE    0   80    0  _main
 57     0   variable    synch           0    TRUE    1    5    0  any
 58    57   variable    semaphore       0    TRUE    1    5    0  barberready
 59    58   variable    semaphore       0    TRUE    1    6    0  availablewaitingroomseats
 60    59   variable    semaphore       0    TRUE    1    7    0  customerswaiting
 61    60   variable    integer         0    TRUE    1    8    0  wrseats
 62    61   type id     process         3    TRUE    1    0    0  barber
 63    62   type id     process         4    TRUE    1   24    0  customer
 64     0   variable    integer         0    TRUE    2    5    0  atendido
 65    64   variable    integer         0    TRUE    2    6    0  no_atendido
 66    63   variable    array           1    TRUE    1    9    0  customers
 67    66   variable    process         3    TRUE    1   16    0  barbershopowner
 68    67   variable    integer         0    TRUE    1   17    0  i
 69    68   variable    integer         0    TRUE    1   18    0  n

Generated P-code

    0     ldcon.b      0         1 ; 11
    1     jmpiz        0        23 ; 11
    2     ldcon.i      0        10 ; 13
    3     sleap        0         0 ; 13
    4     ldadr        1         7 ; 15
    5     wait         0         0 ; 15
    6     ldadr        1         6 ; 16
    7     wait         0         0 ; 16
    8     ldadr        1         8 ; 16
    9     ldval.i      1         8 ; 17
   10     ldcon.i      0         1 ; 17
   11     add  .i      0         0 ; 17
   12     store.i      0         0 ; 17
   13     ldadr        1         5 ; 18
   14     signl        0         0 ; 18
   15     ldadr        1         6 ; 19
   16     signl        0         0 ; 19
   17     ldcon.i      0        20 ; 20
   18     wrstr        0         0 ; 20
   19     wrlin        0         0 ; 20
   20     ldcon.i      0        10 ; 21
   21     sleap        0         0 ; 21
   22     jmp          0         0 ; 21
   23     rproc        1         0 ; 23
   24     ldadr        2         5 ; 29
   25     ldcon.i      0         0 ; 30
   26     store.i      0         0 ; 30
   27     ldval.i      2         5 ; 31
   28     ldcon.i      0         1 ; 31
   29     relne.i      0         0 ; 31
   30     jmpiz        0        79 ; 31
   31     ldcon.i      0        10 ; 33
   32     sleap        0         0 ; 33
   33     ldadr        1         6 ; 34
   34     wait         0         0 ; 34
   35     ldval.i      1         8 ; 35
   36     ldcon.i      0         0 ; 35
   37     relgt.i      0         0 ; 35
   38     jmpiz        0        71 ; 35
   39     ldcon.i      0        25 ; 38
   40     wrstr        0        20 ; 38
   41     wrlin        0         0 ; 38
   42     ldadr        1         8 ; 38
   43     ldval.i      1         8 ; 39
   44     ldcon.i      0         1 ; 39
   45     sub  .i      0         0 ; 39
   46     store.i      0         0 ; 39
   47     ldadr        1         7 ; 40
   48     signl        0         0 ; 40
   49     ldadr        1         6 ; 41
   50     signl        0         0 ; 41
   51     ldcon.i      0        23 ; 42
   52     wrstr        0        45 ; 42
   53     wrlin        0         0 ; 42
   54     ldadr        1         5 ; 43
   55     wait         0         0 ; 43
   56     ldcon.i      0        28 ; 44
   57     wrstr        0        68 ; 44
   58     wrlin        0         0 ; 44
   59     ldcon.i      0        10 ; 45
   60     sleap        0         0 ; 45
   61     ldcon.i      0        39 ; 46
   62     wrstr        0        96 ; 46
   63     wrlin        0         0 ; 46
   64     ldadr        2         5 ; 46
   65     ldcon.i      0         2 ; 47
   66     stfun.i      0        19 ; 47
   67     store.i      0         0 ; 47
   68     ldcon.i      0        10 ; 48
   69     sleap        0         0 ; 48
   70     jmp          0        78 ; 49
   71     ldadr        1         6 ; 52
   72     signl        0         0 ; 52
   73     ldcon.i      0        35 ; 53
   74     wrstr        0       135 ; 53
   75     wrlin        0         0 ; 53
   76     ldcon.i      0        10 ; 54
   77     sleap        0         0 ; 54
   78     jmp          0        27 ; 55
   79     rproc        1         0 ; 56
   80     rndmiz        0         0 ; 64
   81     ldadr        1         8 ; 65
   82     ldcon.i      0         5 ; 66
   83     store.i      0         0 ; 66
   84     ldadr        1         5 ; 67
   85     ldcon.i      0         0 ; 67
   86     lobnd.i      0         0 ; 67
   87     sinit        0         0 ; 67
   88     ldadr        1         6 ; 68
   89     ldcon.i      0         1 ; 68
   90     lobnd.i      0         0 ; 68
   91     sinit        0         0 ; 68
   92     ldadr        1         7 ; 69
   93     ldcon.i      0         0 ; 69
   94     lobnd.i      0         0 ; 69
   95     sinit        0         0 ; 69
   96     cobeg        0         0 ; 69
   97     mrkst        1        62 ; 71
   98     ldadr        1        16 ; 71
   99     procv        0         0 ; 71
  100     calls        1         4 ; 71
  101     ldadr        1        17 ; 72
  102     ldcon.i      0         1 ; 73
  103     ldcon.i      0         7 ; 73
  104     for1u.i      0       112 ; 73
  105     mrkst        1        63 ; 73
  106     ldadr        1         9 ; 73
  107     ldval.i      1        17 ; 74
  108     ixary.i      0         1 ; 74
  109     procv        0         0 ; 74
  110     calls        1         4 ; 74
  111     for2u.i      0       105 ; 74
  112     coend        0         0 ; 74
  113     stop         0         0 ; 75
