program barbero;

var
    barberReady, availableWaitingRoomSeats, customersWaiting : semaphore;
    {barbero listo, asientos disponibles en sala de espere, clientes esperando}
    WRseats: integer;
    {asientos en sala de espera}

process type barber;
begin
    while true do
    begin
        sleep(10);
        {Barbero esperara clientes para trabajar}
        wait(customersWaiting);
        wait(availableWaitingRoomSeats);
        WRseats:= WRseats +1;
        signal(barberReady);
        signal(availableWaitingRoomSeats);
        writeln('Barbero va a atender');
        sleep(10);

    end;
    
end;
    
process type customer;
var atendido,no_atendido : integer;
begin
    atendido:=0;
    while atendido<>1 do
    begin
        sleep(10);
        wait(availableWaitingRoomSeats);
        if WRseats > 0 then
        {Si ha asientos de espera disponible, el cliente se sentara a esperar que lo atiendan}
            begin
                writeln('Llega cliente y se sienta');
                WRseats:= WRseats - 1;
                signal(customersWaiting);
                signal(availableWaitingRoomSeats);
                writeln('Cliente espera atencion');
                wait(barberReady);
                writeln('Cliente esta siendo atendido');
                sleep(10);
                writeln('Cliente termino de ser atendido y se va');
                atendido:=Random(2);
                sleep(10);
            end
        else begin
        {Si no hay asientos el cliente se ira y volvera en otro momento}
                signal(availableWaitingRoomSeats);
                writeln('Cliente no encontro asiento y se va');
                sleep(10);
            end;
    end;
end;

var
    customers : array [1..7] of customer;
    barbershopOwner : barber;
    i,n : integer;        

begin
    Randomize;
    WRseats:=5;
    initial(barberReady,0);
    initial(availableWaitingRoomSeats,1);
    initial(customersWaiting,0);

    cobegin;
        barbershopOwner;
        for i := 1 to 7 do
            customers[i];
    coend;

end.

